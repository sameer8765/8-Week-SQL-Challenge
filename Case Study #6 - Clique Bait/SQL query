  ------------------------------------------------------------ DIGITAL ANALYSIS ----------------------------------------------------------------------
  
  1> How many users are there?
  
  SELECT COUNT(DISTINCT USER_ID) AS COUNT_OF_USERS
  FROM USERS;
  
  2> How many cookies does each user have on average?
  
   SELECT AVG(COOKIE_COUNT) AS USER_HAVE_AVG_COOKIE
   FROM
   (SELECT USER_ID, COUNT(COOKIE_ID) AS COOKIE_COUNT
   FROM USERS
   GROUP BY USER_ID
   ORDER BY USER_ID) A;
   
 3> What is the unique number of visits by all users per month?
 
 SELECT MONTH(EVENT_TIME) AS MONTH_NUMBER, COUNT(DISTINCT VISIT_ID) AS NO_OF_UNIQUE_VISITOR
 FROM EVENTS
 GROUP BY MONTH_NUMBER
 ORDER BY MONTH_NUMBER;
 
 4> What is the number of events for each event type?
 
 SELECT EVENT_TYPE,EVENT_NAME,  COUNT(*) AS NO_OF_EVENT
 FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 GROUP BY EVENT_TYPE
 ORDER BY EVENT_TYPE;
 
 5> What is the percentage of visits which have a purchase event?
 
 SELECT  
 ROUND(100*COUNT(DISTINCT E.VISIT_ID)/(SELECT COUNT(DISTINCT E.VISIT_ID) FROM EVENTS),2) AS PURCHASE_VISIT_PERCENTAGE
 FROM EVENTS E 
 JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 WHERE E.EVENT_TYPE = 'Purchase';
 
 6> What is the percentage of visits which view the checkout page but do not have a purchase event?
 
 WITH CHECK_VIEW_COUNT AS
 (SELECT COUNT(E.VISIT_ID) AS CNT
 FROM EVENTS E 
 JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID
 WHERE PAGE_NAME = 'checkout'
 AND EVENT_NAME = 'Page View')
 
 SELECT ROUND(100*COUNT(DISTINCT E.VISIT_ID)/(SELECT CNT FROM CHECK_VIEW_COUNT),2) AS PERCENTAGE_VIEW_CHECKOUT_NOT_PURCHASE
 FROM EVENTS E 
 JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 WHERE EVENT_NAME! = 'Purchase';
 
 7> What are the top 3 pages by number of views?
 
 SELECT PAGE_NAME, COUNT(*) AS PAGE_VIEWS
 FROM EVENTS E 
 JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID
 WHERE EVENT_NAME = 'Page VIEW'
 GROUP BY PAGE_NAME
 ORDER BY PAGE_NAME;
 
 8> What is the number of views and cart adds for each product category?
 
 SELECT PRODUCT_CATEGORY,
 SUM(CASE WHEN EVENT_NAME = 'Page View' THEN 1 ELSE 0 END) AS PAGE_VIEWS,
  SUM(CASE WHEN EVENT_NAME = 'Add to Cart' THEN 1 ELSE 0 END) AS CART_ADDS
 FROM EVENTS E 
 JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID
 GROUP BY PRODUCT_CATEGORY
 ORDER BY PRODUCT_CATEGORY;
 
 9> What are the top 3 products by purchases?
 
 SELECT PRODUCT_CATEGORY, COUNT(*) AS PURCHASE_COUNT
 FROM EVENTS E 
 JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
 JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
 WHERE EI.EVENT_NAME = 'Add to cart' AND 
 E.VISIT_ID IN 
 (SELECT E.VISIT_ID FROM EVENTS E  JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE 
 WHERE EI.EVENT_NAME = 'Purchase')
 GROUP BY PRODUCT_CATEGORY;
 
 ------------------------------------------------------ PRODUCT FUNNEL ANALYSIS ----------------------------------------------------------------------
 
 Using a single SQL query - create a new output table which has the following details:

  * How many times was each product viewed?
  * How many times was each product added to cart?
  * How many times was each product added to a cart but not purchased (abandoned)?
  * How many times was each product purchased?
  
  CREATE TABLE PRODUCT_SUMMARY AS
  WITH PRODUCT_INFO_CTE AS
  (SELECT 
  PRODUCT_ID,
  PAGE_NAME AS PRODUCT_NAME,
  PRODUCT_CATEGORY,
  SUM(CASE WHEN EVENT_NAME = 'Page View' THEN 1 ELSE 0 END) AS VIEWS,
  SUM(CASE WHEN EVENT_NAME = 'Add to Cart' THEN 1 ELSE 0 END) AS ADD_TO_CART
  FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
  GROUP BY PRODUCT_ID,PRODUCT_NAME, PRODUCT_CATEGORY),
  
  PRODUCT_ABANDONED AS
  (SELECT 
  PRODUCT_ID,
  PAGE_NAME AS PRODUCT_NAME,
  PRODUCT_CATEGORY,
  COUNT(*) AS ABANDONED
  FROM EVENTS E 
  JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
  WHERE EVENT_NAME = 'Add to Cart' AND VISIT_ID NOT IN
  (SELECT E.VISIT_ID FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  WHERE EVENT_NAME = 'Purchase')
  GROUP BY PRODUCT_ID,PRODUCT_NAME, PRODUCT_CATEGORY),
  
  PRODUCT_PURCHASED AS
  (SELECT 
  PRODUCT_ID,
  PAGE_NAME AS PRODUCT_NAME,
  PRODUCT_CATEGORY,
  COUNT(*) AS PURCHASED
  FROM EVENTS E 
  JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
  WHERE EVENT_NAME = 'Add to Cart' AND VISIT_ID IN
  (SELECT E.VISIT_ID FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  WHERE EVENT_NAME = 'Purchase')
  GROUP BY PRODUCT_ID,PRODUCT_NAME, PRODUCT_CATEGORY)
  
  SELECT PI.PRODUCT_ID, PI.PRODUCT_NAME, PI.PRODUCT_CATEGORY, PI.VIEWS, PI.ADD_TO_CART, PA.ABANDONED, PP.PURCHASED
  FROM PRODUCT_INFO_CTE PI 
  JOIN PRODUCT_ABANDONED PA ON PI.PRODUCT_ID = PA.PRODUCT_ID
  JOIN PRODUCT_PURCHASED PP ON PI.PRODUCT_ID = PP.PRODUCT_ID;
  
  Additionally, create another table which further aggregates the data for the above points but this time for each product category instead of 
  individual products.
   
  CREATE TABLE CATEGORY_INFO AS
    WITH PRODUCT_INFO_CTE AS
  (SELECT 
   PRODUCT_CATEGORY,
  SUM(CASE WHEN EVENT_NAME = 'Page View' THEN 1 ELSE 0 END) AS VIEWS,
  SUM(CASE WHEN EVENT_NAME = 'Add to Cart' THEN 1 ELSE 0 END) AS ADD_TO_CART
  FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
  GROUP BY PRODUCT_CATEGORY),
  
  PRODUCT_ABANDONED AS
  (SELECT 
  PRODUCT_CATEGORY,
  COUNT(*) AS ABANDONED
  FROM EVENTS E 
  JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
  WHERE EVENT_NAME = 'Add to Cart' AND VISIT_ID NOT IN
  (SELECT E.VISIT_ID FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  WHERE EVENT_NAME = 'Purchase')
  GROUP BY PRODUCT_CATEGORY),
  
  PRODUCT_PURCHASED AS
  (SELECT 
  PRODUCT_CATEGORY,
  COUNT(*) AS PURCHASED
  FROM EVENTS E 
  JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  JOIN PAGE_HIERARCHY P ON E.PAGE_ID = P.PAGE_ID 
  WHERE EVENT_NAME = 'Add to Cart' AND VISIT_ID IN
  (SELECT E.VISIT_ID FROM EVENTS E JOIN EVENT_IDENTIFIER EI ON E.EVENT_TYPE = EI.EVENT_TYPE
  WHERE EVENT_NAME = 'Purchase')
  GROUP BY PRODUCT_CATEGORY)
  
  SELECT PI.PRODUCT_CATEGORY, PI.VIEWS, PI.ADD_TO_CART, PA.ABANDONED, PP.PURCHASED
  FROM PRODUCT_INFO_CTE PI 
  JOIN PRODUCT_ABANDONED PA ON PI.PRODUCT_CATEGORY = PA.PRODUCT_CATEGORY
  JOIN PRODUCT_PURCHASED PP ON PI.PRODUCT_CATEGORY = PP.PRODUCT_CATEGORY;
  
Use your 2 new output tables - answer the following questions:

  * Which product had the most views, cart adds and purchases?
  * Which product was most likely to be abandoned?
  * Which product had the highest view to purchase percentage?
  * What is the average conversion rate from view to cart add?
  * What is the average conversion rate from cart add to purchase?
 
1> Which product had the most views, cart adds and purchases?
      SELECT *
      FROM PRODUCT_SUMMARY  ORDER BY VIEWS DESC LIMIT 1;

      SELECT *
      FROM PRODUCT_SUMMARY  ORDER BY ADD_TO_CART DESC LIMIT 1;

      SELECT *
      FROM PRODUCT_SUMMARY  ORDER BY PURCHASED DESC LIMIT 1;
	  
2> Which product was most likely to be abandoned?
      
	  SELECT *
      FROM PRODUCT_SUMMARY  ORDER BY ABANDONED DESC LIMIT 1;
	  
3> Which product had the highest view to purchase percentage?

      SELECT PRODUCT_NAME, PRODUCT_CATEGORY, 
	  ROUND(100* PURCHASED/ VIEWS ,2) AS PURCHASE_PER_VIEW
      FROM PRODUCT_SUMMARY  ORDER BY PURCHASE_PER_VIEW DESC LIMIT 1;
	  
4> What is the average conversion rate from view to cart add?
      
      SELECT  
	  ROUND(AVG(100* ADD_TO_CART/ VIEWS),2) AS AVG_VIEW_TO_CART
      FROM PRODUCT_SUMMARY  ORDER BY AVG_VIEW_TO_CART DESC LIMIT 1;
	  
5> What is the average conversion rate from cart add to purchase?

      SELECT  
	  ROUND(AVG(100* PURCHASED/ ADD_TO_CART),2) AS AVG_CART_TO_PURCHASE
      FROM PRODUCT_SUMMARY  ORDER BY AVG_CART_TO_PURCHASE DESC LIMIT 1;
	  
------------------------------------- CAMPAIGN ANALYSIS -------------------------------------------------

Generate a table that has 1 single row for every unique visit_id record and has the following columns:

* user_id
* visit_id
* visit_start_time: the earliest event_time for each visit
* page_views: count of page views for each visit
* cart_adds: count of product cart add events for each visit
* purchase: 1/0 flag if a purchase event exists for each visit
* campaign_name: map the visit to a campaign if the visit_start_time falls between the start_date and end_date
* impression: count of ad impressions for each visit
* click: count of ad clicks for each visit
* (Optional column) cart_products: a comma separated text value with products added to the cart sorted by the 
  order they were added to the cart (hint: use the sequence_number)
  
CREATE TABLE CAMPAIGN_SUMMARY AS 
SELECT
    u.user_id,
    e.visit_id,
    MIN(event_time) AS visit_start_time,
    SUM(CASE WHEN ei.event_name = 'Page View' THEN 1 ELSE 0 END) AS page_views,
    SUM(CASE WHEN ei.event_name = 'Add to Cart' THEN 1 ELSE 0 END) AS cart_adds,
    SUM(CASE WHEN ei.event_name = 'Purchase' THEN 1 ELSE 0 END) AS purchase,
    c.campaign_name,
    SUM(CASE WHEN ei.event_name = 'Ad Impression' THEN 1 ELSE 0 END) AS impression,
    SUM(CASE WHEN ei.event_name = 'Ad Click' THEN 1 ELSE 0 END) AS click,
    GROUP_CONCAT(CASE WHEN ei.event_name = 'Add to Cart' THEN ph.page_name ELSE NULL END 
 ORDER BY e.sequence_number SEPARATOR ', ') AS cart_products
FROM events e
JOIN users u 
    ON e.cookie_id = u.cookie_id
JOIN event_identifier ei 
    ON e.event_type = ei.event_type
JOIN page_hierarchy ph 
    ON e.page_id = ph.page_id
LEFT JOIN campaign_identifier c 
    ON e.event_time BETWEEN c.start_date AND c.end_date
GROUP BY u.user_id, e.visit_id, c.campaign_name;

1. CALCULATE THE NUMBER OF USERS IN EACH GROUP 

   SELECT COUNT(DISTINCT USER_ID) AS RECEIVED_IMPRESSION
   FROM CAMPAIGN_SUMMARY
   WHERE Impression > 0 AND CAMPAIGN_NAME IS NOT NULL;
   
   SELECT COUNT(DISTINCT USER_ID) AS RECEIVED_IMPRESSION_NOT_CLICKED
   FROM CAMPAIGN_SUMMARY
   WHERE Impression > 0 AND CAMPAIGN_NAME IS NOT NULL AND CLICK = 0;
   
   SELECT COUNT(DISTINCT USER_ID) AS NOT_RECEIVED_IMPRESSION
   FROM CAMPAIGN_SUMMARY
   WHERE CAMPAIGN_NAME IS NOT NULL AND 
   USER_ID NOT IN (SELECT USER_ID FROM CAMPAIGN_SUMMARY WHERE Impression > 0);
   
   Now we know:

   * The number of users who received impressions during campaign periods is 417.
   * The number of users who received impressions but didn't click on the ad is 127.
   * The number of users who didn't receive impressions during campaign periods is 56.
   Using those numbers, we can calculate:
 
    * Overall, impression rate = 100 * 417 / (417+56) = 88.2 %
    * Overall, click rate = 100-(100 * 127 / 417) = 69.5 %
  
2. Calculate the average clicks, average views, average cart adds, and average purchases of each group  
   
    --For users who received impressions
   received = 417

   SELECT 
        CAST(1.0*SUM(page_views) / @received AS decimal(10,1)) AS avg_view,
        CAST(1.0*SUM(cart_adds) / @received AS decimal(10,1)) AS avg_cart_adds,
        CAST(1.0*SUM(purchase) / @received AS decimal(10,1)) AS avg_purchase
   FROM campaign_summary
   WHERE impression > 0
   AND campaign_name IS NOT NULL;
   
   --For users who received impressions but didn't click on the ad
   received_not_clicked = 127

   SELECT
         CAST(1.0*SUM(page_views) / @received_not_clicked AS decimal(10,1)) AS avg_view,
         CAST(1.0*SUM(cart_adds) / @received_not_clicked AS decimal(10,1)) AS avg_cart_adds,
         CAST(1.0*SUM(purchase) / @received_not_clicked AS decimal(10,1)) AS avg_purchase
   FROM campaign_summary
   WHERE impression > 0
   AND click = 0
   AND campaign_name IS NOT NULL;
   
   --For users didn't receive impressions
   not_received = 56

   SELECT 
         CAST(1.0*SUM(page_views) / @not_received AS decimal(10,1)) AS avg_view,
         CAST(1.0*SUM(cart_adds) / @not_received AS decimal(10,1)) AS avg_cart_adds,
         CAST(1.0*SUM(purchase) / @not_received AS decimal(10,1)) AS avg_purchase
   FROM campaign_summary
   WHERE campaign_name IS NOT NULL
   AND user_id NOT IN (
                       SELECT user_id
                       FROM campaign_summary
                       WHERE impression > 0);
  
