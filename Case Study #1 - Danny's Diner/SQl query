----------------------------------------------------- CASE STUDY QUESTIONS ------------------------------------------------------------------------------

1 >  What is the total amount each customer spent at the restaurant?

select s.customer_id, sum(price) from sales s 
join menu m on s.product_id = m.product_id
group by 1;

2> How many days has each customer visited the restaurant?

select customer_id, count(distinct order_date) as visit_count from sales group by 1;

3> What was the first item from the menu purchased by each customer?

select customer_id, product_name from 
(select customer_id, order_date,product_name, dense_rank() over(partition by customer_id order by order_date) as ranking
from sales s join menu m on s.product_id= m.product_id) as a
where ranking = 1;

4> What is the most purchased item on the menu and how many times was it purchased by all customers?
with most_purchased as
(select * from 
(select product_name, count(*) times_purchased
from sales s join menu m on s.product_id= m.product_id
group by product_name order by times_purchased desc limit 1) as A)

select customer_id, product_name, count(*) as times_ordered
from sales s join menu m on s.product_id= m.product_id
where product_name = (select product_name from most_purchased)
group by customer_id, product_name;

5> Which item was the most popular for each customer?
with most_ordered_by_each_customer as
(select *, dense_rank() over(partition by customer_id order by times_ordered desc) as ranking
from
(select customer_id, product_name, count(order_date) times_ordered
from sales s join menu m on s.product_id= m.product_id
group by customer_id, product_name) as A)

select customer_id, product_name, times_ordered from most_ordered_by_each_customer where ranking = 1;

6> Which item was purchased first by the customer after they became a member?

with master_member_join as
(select customer_id, product_name, join_date, row_number() over(partition by customer_id order by join_date) as ranking
from
(select s.customer_id, order_date, s.product_id, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id) as A
where join_date <= order_date)

select customer_id, product_name, join_date from master_member_join where ranking = 1;

7> Which item was purchased just before the customer became a member?

with master_member_join as
(select customer_id, product_name, join_date, row_number() over(partition by customer_id order by join_date) as ranking
from
(select s.customer_id, order_date, s.product_id, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id) as A
where join_date > order_date)

select customer_id, product_name, join_date from master_member_join where ranking = 1;

8> What is the total items and amount spent for each member before they became a member?

select customer_id, count(product_name) as total_item, sum(price) as amount_spent from 
(select s.customer_id, order_date, s.product_id, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id) as A
where join_date > order_date
group by customer_id
order by customer_id;

9> If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
--- note: those who are the members they got the points only
with points_table as 
(select customer_id, product_name, price, 
case when product_name = 'sushi' then 2*price*10
       else price*10 end as points
from
(select s.customer_id, order_date, s.product_id, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id) as a where join_date is not null)

select customer_id, sum(points) as total_points from points_table group by customer_id order by customer_id;

10> In the first week after a customer joins the program (including their join date) they earn 2x points on all items,not just sushi - how many points do customer A and B 
    have at the end of January?

note: those who are the members they got the points only

with points_table as 
(select customer_id, product_name, price, 
case when order_date between join_date and date_add(join_date, interval 6 day) then 2*price*10
	 when product_name = 'sushi' then 2*price*10 
     else price*10 end as points
from
(select s.customer_id, order_date, s.product_id, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id) as a where join_date is not null)

select customer_id, sum(points) as total_points from points_table group by customer_id order by customer_id;

--------------------------------------------------------- BONUS QUESTIONS -------------------------------------------------------------------------------------------
------------------------------------------------------- JOIN ALL THE THINGS ------------------------------------------------------------------------------------------

select customer_id, order_date, product_name,price,
case when join_date <= order_date then 'y'
     else 'n' end as member
     from
(select s.customer_id, order_date, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id)as a;

------------------------------------------------------- RANK ALL THE THINGS --------------------------------------------------------------------------------------------

with member_cte as
(select customer_id, order_date, product_name,price,
case when join_date <= order_date then 'y'
     else 'n' end as member
     from
(select s.customer_id, order_date, product_name, price, join_date from sales s 
inner join menu m 
on s.product_id = m.product_id
left join members mem on s.customer_id = mem.customer_id)as a)

select *, case when member = 'n' then null
               else  row_number() over(partition by customer_id, member order by member) end as ranking
               from member_cte;
